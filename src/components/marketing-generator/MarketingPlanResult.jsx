import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Download, Share2, FileText, BarChart2, PieChart, Loader2 } from 'lucide-react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

const MarketingPlanResult = ({ plan, inputs, onBack }) => {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const sections = [
    { title: 'Executive Summary', content: plan.content[0].text.match(/1\.\s*Executive Summary([\s\S]*?)2\./)?.[1]?.trim() },
    { title: 'Mission Statement', content: plan.content[0].text.match(/2\.\s*Mission Statement([\s\S]*?)3\./)?.[1]?.trim() },
    { title: 'Marketing Objectives', content: plan.content[0].text.match(/3\.\s*Marketing Objectives([\s\S]*?)4\./)?.[1]?.trim() },
    { title: 'SWOT Analysis', content: plan.content[0].text.match(/4\.\s*SWOT Analysis([\s\S]*?)5\./)?.[1]?.trim() },
    { title: 'Market Research', content: plan.content[0].text.match(/5\.\s*Market Research([\s\S]*?)6\./)?.[1]?.trim() },
    { title: 'Marketing Strategy', content: plan.content[0].text.match(/6\.\s*Marketing Strategy([\s\S]*?)7\./)?.[1]?.trim() },
    { title: 'Budget Allocation', content: plan.content[0].text.match(/7\.\s*Budget Allocation([\s\S]*?)$/)?.[1]?.trim() }
  ];

  const handleDownload = async () => {
    setIsGeneratingPDF(true);
    try {
      const doc = new jsPDF();
      const fileName = `${inputs.planName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_marketing_plan.pdf`;
  
      const addPageHeader = () => {
        doc.addImage('/assets/growth-academy-black-logo.png', 'PNG', 20, 15, 60, 15);
        doc.setDrawColor(0, 0, 0);
        doc.setLineWidth(0.5);
        doc.line(20, 40, 190, 40);
        doc.setFillColor(0, 0, 0);
        doc.rect(0, 0, 8, 297, 'F');
      };
  
      const addPageFooter = (pageNumber) => {
        const totalPages = doc.internal.getNumberOfPages();
        doc.setFontSize(10);
        doc.setTextColor(128, 128, 128);
        doc.setDrawColor(200, 200, 200);
        doc.setLineWidth(0.2);
        doc.line(20, 280, 190, 280);
        doc.text('Generated by Growth Academy', 20, 288);
        doc.text(`Page ${pageNumber} of ${totalPages}`, 170, 288);
        doc.setTextColor(0, 0, 0);
        doc.text('www.growthacademy-hq.com', 85, 288);
      };
  
     // First page - Cover and Input Details

        addPageHeader();

        // Title and subtitle with better spacing
        doc.setFontSize(24);
        doc.setTextColor(0, 0, 0);
        doc.text(inputs.planName, 105, 70, { align: 'center' });

        doc.setFontSize(16);
        doc.setTextColor(100, 100, 100);
        doc.text('Marketing Plan', 105, 85, { align: 'center' });

        // Input details box with better structure
        doc.setFillColor(247, 247, 247);
        doc.rect(20, 110, 170, 150, 'F');

        const details = [
          { 
            label: 'Business Idea',
            content: inputs.businessIdea,
          },
          { 
            label: 'Target Market',
            content: inputs.targetMarket,
          },
          { 
            label: 'Current Stage',
            content: inputs.currentStage,
          },
          { 
            label: 'Marketing Goals',
            content: inputs.marketingGoals,
          },
          { 
            label: 'Budget',
            content: inputs.budget,
          }
        ];

        let yPos = 130;
        details.forEach(detail => {
          // Label
          doc.setFontSize(12);
          doc.setTextColor(0, 0, 0);
          doc.setFont(undefined, 'bold');
          doc.text(`${detail.label}:`, 30, yPos);
          
          // Content with proper spacing and justification
          doc.setFont(undefined, 'normal');
          doc.setTextColor(66, 66, 66);
          const splitContent = doc.splitTextToSize(detail.content, 140); // Wider content area
          
          // Add content with proper indentation
          doc.text(splitContent, 30, yPos + 7, { 
            align: 'justify',
          });
          
          // Calculate next position based on content height
          const contentHeight = splitContent.length * 7;
          yPos += contentHeight + 20; // Increased spacing between items
        });

        addPageFooter(1);
  
      // Content pages - Starting from page 2
      sections.forEach((section, index) => {
        doc.addPage();
        addPageHeader();
        let currentYPos = 60;
  
        // Section header
        doc.setFillColor(0, 0, 0, 0.1);
        doc.rect(20, currentYPos, 170, 12, 'F');
        doc.setFontSize(16);
        doc.setTextColor(0, 0, 0);
        doc.text(section.title, 25, currentYPos + 8);
  
        // Section content
        doc.setFontSize(12);
        doc.setTextColor(66, 66, 66);
        
        const formattedContent = section.content?.split('\n').map(line => {
          if (line.trim().startsWith('-')) {
            return `  â€¢ ${line.trim().substring(1)}`;
          }
          return line;
        }).join('\n');
  
        const splitContent = doc.splitTextToSize(formattedContent || '', 160);
        currentYPos += 20;
  
        splitContent.forEach(line => {
          if (currentYPos > 270) {
            doc.addPage();
            addPageHeader();
            currentYPos = 60;
          }
          doc.text(line, 20, currentYPos, { align: 'justify' });
          currentYPos += 7;
        });
  
        addPageFooter(doc.internal.getCurrentPageInfo().pageNumber);
      });
  
      doc.save(fileName);
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  const handleShare = async () => {
    try {
      await navigator.share({
        title: inputs.planName,
        text: 'Check out my marketing plan from Growth Academy',
        url: window.location.href
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  return (
    <div className="min-h-screen bg-ga-black/50 p-6">
      <div className="max-w-5xl mx-auto space-y-6">
        <div className="flex flex-col space-y-4 md:flex-row md:justify-between md:items-center">
          <div className="flex items-center gap-4">
            <Button variant="ghost" onClick={onBack} className="text-ga-white">
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div>
              <h1 className="text-2xl font-alata text-ga-white">{inputs.planName}</h1>
              <p className="text-sm text-ga-light">Marketing Plan</p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={handleShare} className="gap-2 text-ga-white border-ga-white/10">
              <Share2 className="w-4 h-4" />
              Share
            </Button>
            <Button 
              variant="outline" 
              onClick={handleDownload} 
              disabled={isGeneratingPDF}
              className="gap-2 text-ga-white border-ga-white/10"
            >
              {isGeneratingPDF ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4" />
                  Download PDF
                </>
              )}
            </Button>
          </div>
        </div>

        <Card className="bg-ga-black/30 border-ga-white/10">
          <CardHeader>
            <div className="flex items-center gap-2">
              <FileText className="w-5 h-5 text-purple-400" />
              <div>
                <CardTitle className="text-ga-white">Plan Details</CardTitle>
                <CardDescription className="text-ga-light">Generated for {inputs.businessIdea}</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent className="grid md:grid-cols-2 gap-4 text-sm">
            <div>
              <p className="font-medium text-ga-white">Target Market:</p>
              <p className="text-ga-light">{inputs.targetMarket}</p>
            </div>
            <div>
              <p className="font-medium text-ga-white">Current Stage:</p>
              <p className="text-ga-light">{inputs.currentStage}</p>
            </div>
            <div>
              <p className="font-medium text-ga-white">Marketing Goals:</p>
              <p className="text-ga-light">{inputs.marketingGoals}</p>
            </div>
            <div>
              <p className="font-medium text-ga-white">Budget:</p>
              <p className="text-ga-light">{inputs.budget}</p>
            </div>
          </CardContent>
        </Card>

        <ScrollArea className="h-[calc(100vh-300px)]">
          <div className="space-y-6">
            {sections.map((section, index) => (
              <Card key={index} className="bg-ga-black/30 border-ga-white/10">
                <CardHeader>
                  <div className="flex items-center gap-2">
                    {index % 2 === 0 ? <BarChart2 className="w-5 h-5 text-purple-400" /> : <PieChart className="w-5 h-5 text-purple-400" />}
                    <CardTitle className="text-ga-white">{section.title}</CardTitle>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="prose prose-invert max-w-none">
                    <ReactMarkdown>{section.content || ''}</ReactMarkdown>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </ScrollArea>
      </div>
    </div>
  );
};

export default MarketingPlanResult;